language: "my_meta_language"
version: "1.0"

structure:
# Define the structure of the grammar
  rules:
    - type: 
      - "sequence"
      - "choice"
      - "choice_sequence"
      - "sequence_choice"
      name: "a_name"
# depending on the type, this can be a sequence or a choice
# sequence --> elements // choice --> options
      elements: # options:
        - type: 
          - "keyword"
          - "symbol"
          - "reference"
# depending on the type, this can be a keyword, symbol, or reference
# keyword --> value // symbol --> value // reference --> value (refferencing a target)
          value: "a_value"
          label:
            - true
            - false
# depending ont the boolean value, this can have a label or not
# if it has a label :
            - name: "a_label_name"
              type: 
                - "alternative"
                - "rule elements"
# depending on the type, this can be a sequence_choice or a choice_sequence
# it has the elements part
# and then, it gets a inside choices :
      choices:
        - type: 
          - "sequence"
          - "choice"
          name: "a_choice_name"
          elements: # options:
            - type: 
              - "keyword"
              - "symbol"
              - "reference"
              value: "a_choice_value"
              


  tokens:
# Define the tokens used in the grammar
# Each token has a name and a pattern, and some may be ignored
    - name: "my_token"
      pattern: "my_pattern"
      ignored: false

# Define the order of precedence and associativity for operators
# Each operator has a name and a level
  precedence:
    - type:
      - "rule"
      - "token"
      value: "a_value"
      level: 1
      direction:
        - "left"
        - "right"

  conflicts:
    - elements: ["rule_name_1", "rule_name_2", "rule_name_3"]

  inline:
    - "rule_name_1"
    - "rule_name_2"
    - "rule_name_3"

