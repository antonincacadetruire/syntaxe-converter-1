{
    "name": "",
    "rules": [
        {
            "name": "this",
            "args": "_",
            "production": [
                "Terminal",
                "this"
            ]
        },
        {
            "name": "super",
            "args": "_",
            "production": [
                "Terminal",
                "super"
            ]
        },
        {
            "name": "true",
            "args": "_",
            "production": [
                "Terminal",
                "true"
            ]
        },
        {
            "name": "false",
            "args": "_",
            "production": [
                "Terminal",
                "false"
            ]
        },
        {
            "name": "null",
            "args": "_",
            "production": [
                "Terminal",
                "null"
            ]
        },
        {
            "name": "undefined",
            "args": "_",
            "production": [
                "Terminal",
                "undefined"
            ]
        },
        {
            "name": "throws",
            "args": "$",
            "production": [
                "Sequence",
                [
                    [
                        "Terminal",
                        "throws"
                    ],
                    [
                        "FunctionCall",
                        "commaSep1",
                        [
                            [
                                "NonTerminal",
                                "_type"
                            ]
                        ]
                    ]
                ]
            ]
        }
    ],
    "tokens": [],
    "extras": null,
    "conflicts": null,
    "inline": null,
    "externals": null,
    "precedences": null,
    "word": null,
    "supertypes": null,
    "scope": null,
    "file_types": null,
    "injection_regex": null,
    "comments": null,
    "auto_alias": null,
    "javascript": [
        "const DIGITS = token(choice(\"0\", seq(/[1-9]/, optional(seq(optional(\"_\"), sep1(/[0-9]+/, /_+/))))));",
        "const DECIMAL_DIGITS = token(sep1(/[0-9]+/, \"_\"));",
        "const HEX_DIGITS = token(sep1(/[A-Fa-f0-9]+/, \"_\"));",
        "function sep1(rule, separator) {return seq(rule, repeat(seq(separator, rule)));}"
    ]
}